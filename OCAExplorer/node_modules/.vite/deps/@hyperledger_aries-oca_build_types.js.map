{
  "version": 3,
  "sources": ["../../@hyperledger/aries-oca/build/types/base/BaseOverlay.js", "../../@hyperledger/aries-oca/build/types/branding/BrandingOverlay.js", "../../@hyperledger/aries-oca/build/types/semantic/CharacterEncodingOverlay.js", "../../@hyperledger/aries-oca/build/types/semantic/FormatOverlay.js", "../../@hyperledger/aries-oca/build/types/semantic/InformationOverlay.js", "../../@hyperledger/aries-oca/build/types/semantic/LabelOverlay.js", "../../@hyperledger/aries-oca/build/types/semantic/MetaOverlay.js", "../../@hyperledger/aries-oca/build/types/semantic/StandardOverlay.js", "../../@hyperledger/aries-oca/build/types/OverlayTypeMap.js", "../../@hyperledger/aries-oca/build/types/capture-base/CaptureBase.js", "../../@hyperledger/aries-oca/build/types/bundle/OverlayBundle.js"],
  "sourcesContent": ["export default class BaseOverlay {\n    #capture_base;\n    type;\n    digest;\n    constructor(overlay) {\n        this.type = overlay.type;\n        this.#capture_base = overlay.capture_base;\n        this.digest = overlay.digest ?? '';\n    }\n    get captureBase() {\n        return this.#capture_base;\n    }\n}\n", "import { generateColor } from '../../utils/color';\nimport BaseOverlay from '../base/BaseOverlay';\nexport default class BrandingOverlay extends BaseOverlay {\n    #background_image;\n    #background_image_slice;\n    #primary_background_color;\n    #secondary_background_color;\n    #primary_attribute;\n    #secondary_attribute;\n    #issued_date_attribute;\n    #expiry_date_attribute;\n    logo;\n    constructor(credentialDefinitionId, overlay) {\n        super(overlay);\n        this.logo = overlay.logo;\n        this.#background_image = overlay.background_image;\n        this.#background_image_slice = overlay.background_image_slice;\n        this.#primary_background_color = overlay.primary_background_color ?? generateColor(credentialDefinitionId);\n        this.#secondary_background_color = overlay.secondary_background_color;\n        this.#primary_attribute = overlay.primary_attribute;\n        this.#secondary_attribute = overlay.secondary_attribute;\n        this.#issued_date_attribute = overlay.issued_date_attribute;\n        this.#expiry_date_attribute = overlay.expiry_date_attribute;\n    }\n    get backgroundImage() {\n        return this.#background_image;\n    }\n    get backgroundImageSlice() {\n        return this.#background_image_slice;\n    }\n    get primaryBackgroundColor() {\n        return this.#primary_background_color;\n    }\n    get secondaryBackgroundColor() {\n        return this.#secondary_background_color;\n    }\n    get primaryAttribute() {\n        return this.#primary_attribute;\n    }\n    get secondaryAttribute() {\n        return this.#secondary_attribute;\n    }\n    get issuedDateAttribute() {\n        return this.#issued_date_attribute;\n    }\n    get expiryDateAttribute() {\n        return this.#expiry_date_attribute;\n    }\n}\n", "import BaseOverlay from '../base/BaseOverlay';\nexport default class CharacterEncodingOverlay extends BaseOverlay {\n    #default_character_encoding;\n    // DEPRECATED - Use #attribute_character_encoding instead\n    #attr_character_encoding;\n    #attribute_character_encoding;\n    constructor(overlay) {\n        super(overlay);\n        this.#default_character_encoding = overlay.default_character_encoding;\n        // DEPRECATED - Use #attribute_character_encoding instead\n        this.#attr_character_encoding = overlay.attr_character_encoding;\n        this.#attribute_character_encoding = overlay.attribute_character_encoding;\n    }\n    get defaultCharacterEncoding() {\n        return this.#default_character_encoding;\n    }\n    // DEPRECATED - Use attributeCharacterEncoding instead\n    get attrCharacterEncoding() {\n        return this.#attr_character_encoding;\n    }\n    get attributeCharacterEncoding() {\n        return this.#attribute_character_encoding;\n    }\n}\n", "import BaseOverlay from '../base/BaseOverlay';\nexport default class FormatOverlay extends BaseOverlay {\n    #attribute_formats;\n    constructor(overlay) {\n        super(overlay);\n        this.#attribute_formats = overlay.attribute_formats;\n    }\n    get attributeFormats() {\n        return this.#attribute_formats;\n    }\n}\n", "import BaseOverlay from '../base/BaseOverlay';\nexport default class InformationOverlay extends BaseOverlay {\n    #attribute_information;\n    language;\n    constructor(overlay) {\n        super(overlay);\n        this.language = overlay.language;\n        this.#attribute_information = overlay.attribute_information;\n    }\n    get attributeInformation() {\n        return this.#attribute_information;\n    }\n}\n", "import BaseOverlay from '../base/BaseOverlay';\nexport default class LabelOverlay extends BaseOverlay {\n    #attribute_labels;\n    #attribute_categories;\n    #category_labels;\n    language;\n    constructor(overlay) {\n        super(overlay);\n        this.language = overlay.language;\n        this.#attribute_labels = overlay.attribute_labels;\n        this.#attribute_categories = overlay.attribute_categories;\n        this.#category_labels = overlay.category_labels;\n    }\n    get attributeLabels() {\n        return this.#attribute_labels;\n    }\n    get attributeCategories() {\n        return this.#attribute_categories;\n    }\n    get categoryLabels() {\n        return this.#category_labels;\n    }\n}\n", "import BaseOverlay from '../base/BaseOverlay';\nexport default class MetaOverlay extends BaseOverlay {\n    #credential_help_text;\n    #credential_support_url;\n    #issuer_description;\n    #issuer_url;\n    language;\n    name;\n    description;\n    issuer;\n    constructor(overlay) {\n        super(overlay);\n        this.language = overlay.language;\n        this.name = overlay.name;\n        this.description = overlay.description;\n        this.#credential_help_text = overlay.credential_help_text;\n        this.#credential_support_url = overlay.credential_support_url;\n        this.issuer = overlay.issuer;\n        this.#issuer_description = overlay.issuer_description;\n        this.#issuer_url = overlay.issuer_url;\n    }\n    get credentialHelpText() {\n        return this.#credential_help_text;\n    }\n    get credentialSupportUrl() {\n        return this.#credential_support_url;\n    }\n    get issuerDescription() {\n        return this.#issuer_description;\n    }\n    get issuerUrl() {\n        return this.#issuer_url;\n    }\n}\n", "import BaseOverlay from '../base/BaseOverlay';\nexport default class StandardOverlay extends BaseOverlay {\n    // DEPRECATED - Use #attribute_standards instead\n    #attr_standards;\n    #attribute_standards;\n    constructor(overlay) {\n        super(overlay);\n        // DEPRECATED - Use #attribute_standards instead\n        this.#attr_standards = overlay.attr_standards;\n        this.#attribute_standards = overlay.attribute_standards;\n    }\n    // DEPRECATED - Use attributeStandards instead\n    get attrStandards() {\n        return this.#attr_standards;\n    }\n    get attributeStandards() {\n        return this.#attribute_standards;\n    }\n}\n", "import BrandingOverlay from './branding/BrandingOverlay';\nimport CharacterEncodingOverlay from './semantic/CharacterEncodingOverlay';\nimport FormatOverlay from './semantic/FormatOverlay';\nimport InformationOverlay from './semantic/InformationOverlay';\nimport LabelOverlay from './semantic/LabelOverlay';\nimport MetaOverlay from './semantic/MetaOverlay';\nimport StandardOverlay from './semantic/StandardOverlay';\nconst OverlayTypeMap = new Map(Object.entries({\n    'spec/overlays/character_encoding/1.0': CharacterEncodingOverlay,\n    'spec/overlays/label/1.0': LabelOverlay,\n    'spec/overlays/information/1.0': InformationOverlay,\n    'spec/overlays/format/1.0': FormatOverlay,\n    'spec/overlays/standard/1.0': StandardOverlay,\n    'spec/overlays/meta/1.0': MetaOverlay,\n    'aries/overlays/branding/1.0': BrandingOverlay,\n}));\nexport default OverlayTypeMap;\n", "export default class CaptureBase {\n    #flagged_attributes;\n    type;\n    classification;\n    attributes;\n    digest;\n    constructor(captureBase) {\n        this.type = captureBase.type;\n        this.classification = captureBase.classification;\n        this.attributes = captureBase.attributes;\n        this.#flagged_attributes = captureBase.flagged_attributes;\n        this.digest = captureBase.digest ?? '';\n    }\n    get flaggedAttributes() {\n        return this.#flagged_attributes;\n    }\n}\n", "import OverlayTypeMap from '../OverlayTypeMap';\nimport BaseOverlay from '../base/BaseOverlay';\nimport BrandingOverlay from '../branding/BrandingOverlay';\nimport CaptureBase from '../capture-base/CaptureBase';\nclass OverlayBundle {\n    credentialDefinitionId;\n    captureBase;\n    overlays;\n    languages;\n    metadata;\n    attributes;\n    flaggedAttributes;\n    constructor(credentialDefinitionId, bundle) {\n        this.credentialDefinitionId = credentialDefinitionId;\n        this.captureBase = new CaptureBase(bundle.capture_base);\n        this.overlays = bundle.overlays\n            .filter((overlay) => overlay.type !== 'aries/overlays/branding/1.0')\n            .map((overlay) => {\n            const OverlayClass = (OverlayTypeMap.get(overlay.type) || BaseOverlay);\n            return new OverlayClass(overlay);\n        });\n        this.overlays.push(...bundle.overlays\n            .filter((overlay) => overlay.type === 'aries/overlays/branding/1.0')\n            .map((overlay) => {\n            const OverlayClass = (OverlayTypeMap.get(overlay.type) || BrandingOverlay);\n            return new OverlayClass(credentialDefinitionId, overlay);\n        }));\n        this.languages = this.#processLanguages();\n        this.metadata = this.#processMetadata();\n        this.attributes = this.#processOverlayAttributes();\n        this.flaggedAttributes = this.attributes.filter((attribute) => this.captureBase.flaggedAttributes.includes(attribute.name));\n    }\n    get branding() {\n        return this.#overlaysForType('aries/overlays/branding/1.0')[0];\n    }\n    getAttribute(name) {\n        return this.attributes.find((attribute) => attribute.name === name);\n    }\n    getFlaggedAttribute(name) {\n        return this.flaggedAttributes.find((attribute) => attribute.name === name);\n    }\n    #processMetadata() {\n        const metadata = {\n            name: {},\n            description: {},\n            credentialHelpText: {},\n            credentialSupportUrl: {},\n            issuer: {},\n            issuerDescription: {},\n            issuerUrl: {},\n        };\n        for (const overlay of this.#overlaysForType('spec/overlays/meta/1.0')) {\n            const language = overlay.language ?? 'en';\n            const { name, description, credentialHelpText, credentialSupportUrl, issuer, issuerDescription, issuerUrl } = overlay;\n            if (name) {\n                metadata.name[language] = name;\n            }\n            if (description) {\n                metadata.description[language] = description;\n            }\n            if (credentialHelpText) {\n                metadata.credentialHelpText[language] = credentialHelpText;\n            }\n            if (credentialSupportUrl) {\n                metadata.credentialSupportUrl[language] = credentialSupportUrl;\n            }\n            if (issuer) {\n                metadata.issuer[language] = issuer;\n            }\n            if (issuerDescription) {\n                metadata.issuerDescription[language] = issuerDescription;\n            }\n            if (issuerUrl) {\n                metadata.issuerUrl[language] = issuerUrl;\n            }\n        }\n        return metadata;\n    }\n    #processLanguages() {\n        const languages = [];\n        for (const overlay of this.#overlaysForType('spec/overlays/meta/1.0')) {\n            const language = overlay.language;\n            if (language && !languages.includes(language)) {\n                languages.push(language);\n            }\n        }\n        languages.sort((a, b) => a.localeCompare(b));\n        return languages;\n    }\n    #processOverlayAttributes() {\n        const attributes = [];\n        const attributeMap = new Map(Object.entries(this.captureBase.attributes));\n        for (const [name, type] of attributeMap) {\n            attributes.push({\n                name,\n                type,\n                information: this.#processInformationForAttribute(name),\n                label: this.#processLabelForAttribute(name),\n                characterEncoding: this.#processCharacterEncodingForAttribute(name),\n                standard: this.#processStandardForAttribute(name),\n                format: this.#processFormatForAttribute(name),\n            });\n        }\n        return attributes;\n    }\n    #processInformationForAttribute(key) {\n        const information = {};\n        for (const overlay of this.#overlaysForType('spec/overlays/information/1.0')) {\n            if (overlay.attributeInformation?.[key]) {\n                const language = overlay.language ?? 'en';\n                information[language] = overlay.attributeInformation[key];\n            }\n        }\n        return information;\n    }\n    #processLabelForAttribute(key) {\n        const label = {};\n        for (const overlay of this.#overlaysForType('spec/overlays/label/1.0')) {\n            if (overlay.attributeLabels?.[key]) {\n                const language = overlay.language ?? 'en';\n                label[language] = overlay.attributeLabels[key];\n            }\n        }\n        return label;\n    }\n    #processCharacterEncodingForAttribute(key) {\n        for (const overlay of this.#overlaysForType('spec/overlays/character_encoding/1.0')) {\n            if (overlay.attributeCharacterEncoding?.[key]) {\n                return overlay.attributeCharacterEncoding[key];\n            }\n        }\n        return;\n    }\n    #processStandardForAttribute(key) {\n        for (const overlay of this.#overlaysForType('spec/overlays/standard/1.0')) {\n            if (overlay.attributeStandards?.[key]) {\n                return overlay.attributeStandards[key];\n            }\n        }\n        return;\n    }\n    #processFormatForAttribute(key) {\n        for (const overlay of this.#overlaysForType('spec/overlays/format/1.0')) {\n            if (overlay.attributeFormats?.[key]) {\n                return overlay.attributeFormats[key];\n            }\n        }\n        return;\n    }\n    #overlaysForType(type) {\n        return this.overlays.filter((overlay) => overlay.type === type);\n    }\n}\nexport default OverlayBundle;\n"],
  "mappings": "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",
  "names": []
}
