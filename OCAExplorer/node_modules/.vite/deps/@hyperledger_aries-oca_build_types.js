import {
  generateColor_default
} from "./chunk-DVF5LCIG.js";
import {
  __privateAdd,
  __privateGet,
  __privateMethod,
  __privateSet,
  __publicField
} from "./chunk-X5MHFPH7.js";

// node_modules/@hyperledger/aries-oca/build/types/base/BaseOverlay.js
var _capture_base;
var BaseOverlay = class {
  constructor(overlay) {
    __privateAdd(this, _capture_base, void 0);
    __publicField(this, "type");
    __publicField(this, "digest");
    this.type = overlay.type;
    __privateSet(this, _capture_base, overlay.capture_base);
    this.digest = overlay.digest ?? "";
  }
  get captureBase() {
    return __privateGet(this, _capture_base);
  }
};
_capture_base = new WeakMap();

// node_modules/@hyperledger/aries-oca/build/types/branding/BrandingOverlay.js
var _background_image, _background_image_slice, _primary_background_color, _secondary_background_color, _primary_attribute, _secondary_attribute, _issued_date_attribute, _expiry_date_attribute;
var BrandingOverlay = class extends BaseOverlay {
  constructor(credentialDefinitionId, overlay) {
    super(overlay);
    __privateAdd(this, _background_image, void 0);
    __privateAdd(this, _background_image_slice, void 0);
    __privateAdd(this, _primary_background_color, void 0);
    __privateAdd(this, _secondary_background_color, void 0);
    __privateAdd(this, _primary_attribute, void 0);
    __privateAdd(this, _secondary_attribute, void 0);
    __privateAdd(this, _issued_date_attribute, void 0);
    __privateAdd(this, _expiry_date_attribute, void 0);
    __publicField(this, "logo");
    this.logo = overlay.logo;
    __privateSet(this, _background_image, overlay.background_image);
    __privateSet(this, _background_image_slice, overlay.background_image_slice);
    __privateSet(this, _primary_background_color, overlay.primary_background_color ?? generateColor_default(credentialDefinitionId));
    __privateSet(this, _secondary_background_color, overlay.secondary_background_color);
    __privateSet(this, _primary_attribute, overlay.primary_attribute);
    __privateSet(this, _secondary_attribute, overlay.secondary_attribute);
    __privateSet(this, _issued_date_attribute, overlay.issued_date_attribute);
    __privateSet(this, _expiry_date_attribute, overlay.expiry_date_attribute);
  }
  get backgroundImage() {
    return __privateGet(this, _background_image);
  }
  get backgroundImageSlice() {
    return __privateGet(this, _background_image_slice);
  }
  get primaryBackgroundColor() {
    return __privateGet(this, _primary_background_color);
  }
  get secondaryBackgroundColor() {
    return __privateGet(this, _secondary_background_color);
  }
  get primaryAttribute() {
    return __privateGet(this, _primary_attribute);
  }
  get secondaryAttribute() {
    return __privateGet(this, _secondary_attribute);
  }
  get issuedDateAttribute() {
    return __privateGet(this, _issued_date_attribute);
  }
  get expiryDateAttribute() {
    return __privateGet(this, _expiry_date_attribute);
  }
};
_background_image = new WeakMap();
_background_image_slice = new WeakMap();
_primary_background_color = new WeakMap();
_secondary_background_color = new WeakMap();
_primary_attribute = new WeakMap();
_secondary_attribute = new WeakMap();
_issued_date_attribute = new WeakMap();
_expiry_date_attribute = new WeakMap();

// node_modules/@hyperledger/aries-oca/build/types/semantic/CharacterEncodingOverlay.js
var _default_character_encoding, _attr_character_encoding, _attribute_character_encoding;
var CharacterEncodingOverlay = class extends BaseOverlay {
  constructor(overlay) {
    super(overlay);
    __privateAdd(this, _default_character_encoding, void 0);
    // DEPRECATED - Use #attribute_character_encoding instead
    __privateAdd(this, _attr_character_encoding, void 0);
    __privateAdd(this, _attribute_character_encoding, void 0);
    __privateSet(this, _default_character_encoding, overlay.default_character_encoding);
    __privateSet(this, _attr_character_encoding, overlay.attr_character_encoding);
    __privateSet(this, _attribute_character_encoding, overlay.attribute_character_encoding);
  }
  get defaultCharacterEncoding() {
    return __privateGet(this, _default_character_encoding);
  }
  // DEPRECATED - Use attributeCharacterEncoding instead
  get attrCharacterEncoding() {
    return __privateGet(this, _attr_character_encoding);
  }
  get attributeCharacterEncoding() {
    return __privateGet(this, _attribute_character_encoding);
  }
};
_default_character_encoding = new WeakMap();
_attr_character_encoding = new WeakMap();
_attribute_character_encoding = new WeakMap();

// node_modules/@hyperledger/aries-oca/build/types/semantic/FormatOverlay.js
var _attribute_formats;
var FormatOverlay = class extends BaseOverlay {
  constructor(overlay) {
    super(overlay);
    __privateAdd(this, _attribute_formats, void 0);
    __privateSet(this, _attribute_formats, overlay.attribute_formats);
  }
  get attributeFormats() {
    return __privateGet(this, _attribute_formats);
  }
};
_attribute_formats = new WeakMap();

// node_modules/@hyperledger/aries-oca/build/types/semantic/InformationOverlay.js
var _attribute_information;
var InformationOverlay = class extends BaseOverlay {
  constructor(overlay) {
    super(overlay);
    __privateAdd(this, _attribute_information, void 0);
    __publicField(this, "language");
    this.language = overlay.language;
    __privateSet(this, _attribute_information, overlay.attribute_information);
  }
  get attributeInformation() {
    return __privateGet(this, _attribute_information);
  }
};
_attribute_information = new WeakMap();

// node_modules/@hyperledger/aries-oca/build/types/semantic/LabelOverlay.js
var _attribute_labels, _attribute_categories, _category_labels;
var LabelOverlay = class extends BaseOverlay {
  constructor(overlay) {
    super(overlay);
    __privateAdd(this, _attribute_labels, void 0);
    __privateAdd(this, _attribute_categories, void 0);
    __privateAdd(this, _category_labels, void 0);
    __publicField(this, "language");
    this.language = overlay.language;
    __privateSet(this, _attribute_labels, overlay.attribute_labels);
    __privateSet(this, _attribute_categories, overlay.attribute_categories);
    __privateSet(this, _category_labels, overlay.category_labels);
  }
  get attributeLabels() {
    return __privateGet(this, _attribute_labels);
  }
  get attributeCategories() {
    return __privateGet(this, _attribute_categories);
  }
  get categoryLabels() {
    return __privateGet(this, _category_labels);
  }
};
_attribute_labels = new WeakMap();
_attribute_categories = new WeakMap();
_category_labels = new WeakMap();

// node_modules/@hyperledger/aries-oca/build/types/semantic/MetaOverlay.js
var _credential_help_text, _credential_support_url, _issuer_description, _issuer_url;
var MetaOverlay = class extends BaseOverlay {
  constructor(overlay) {
    super(overlay);
    __privateAdd(this, _credential_help_text, void 0);
    __privateAdd(this, _credential_support_url, void 0);
    __privateAdd(this, _issuer_description, void 0);
    __privateAdd(this, _issuer_url, void 0);
    __publicField(this, "language");
    __publicField(this, "name");
    __publicField(this, "description");
    __publicField(this, "issuer");
    this.language = overlay.language;
    this.name = overlay.name;
    this.description = overlay.description;
    __privateSet(this, _credential_help_text, overlay.credential_help_text);
    __privateSet(this, _credential_support_url, overlay.credential_support_url);
    this.issuer = overlay.issuer;
    __privateSet(this, _issuer_description, overlay.issuer_description);
    __privateSet(this, _issuer_url, overlay.issuer_url);
  }
  get credentialHelpText() {
    return __privateGet(this, _credential_help_text);
  }
  get credentialSupportUrl() {
    return __privateGet(this, _credential_support_url);
  }
  get issuerDescription() {
    return __privateGet(this, _issuer_description);
  }
  get issuerUrl() {
    return __privateGet(this, _issuer_url);
  }
};
_credential_help_text = new WeakMap();
_credential_support_url = new WeakMap();
_issuer_description = new WeakMap();
_issuer_url = new WeakMap();

// node_modules/@hyperledger/aries-oca/build/types/semantic/StandardOverlay.js
var _attr_standards, _attribute_standards;
var StandardOverlay = class extends BaseOverlay {
  constructor(overlay) {
    super(overlay);
    // DEPRECATED - Use #attribute_standards instead
    __privateAdd(this, _attr_standards, void 0);
    __privateAdd(this, _attribute_standards, void 0);
    __privateSet(this, _attr_standards, overlay.attr_standards);
    __privateSet(this, _attribute_standards, overlay.attribute_standards);
  }
  // DEPRECATED - Use attributeStandards instead
  get attrStandards() {
    return __privateGet(this, _attr_standards);
  }
  get attributeStandards() {
    return __privateGet(this, _attribute_standards);
  }
};
_attr_standards = new WeakMap();
_attribute_standards = new WeakMap();

// node_modules/@hyperledger/aries-oca/build/types/OverlayTypeMap.js
var OverlayTypeMap = new Map(Object.entries({
  "spec/overlays/character_encoding/1.0": CharacterEncodingOverlay,
  "spec/overlays/label/1.0": LabelOverlay,
  "spec/overlays/information/1.0": InformationOverlay,
  "spec/overlays/format/1.0": FormatOverlay,
  "spec/overlays/standard/1.0": StandardOverlay,
  "spec/overlays/meta/1.0": MetaOverlay,
  "aries/overlays/branding/1.0": BrandingOverlay
}));
var OverlayTypeMap_default = OverlayTypeMap;

// node_modules/@hyperledger/aries-oca/build/types/capture-base/CaptureBase.js
var _flagged_attributes;
var CaptureBase = class {
  constructor(captureBase) {
    __privateAdd(this, _flagged_attributes, void 0);
    __publicField(this, "type");
    __publicField(this, "classification");
    __publicField(this, "attributes");
    __publicField(this, "digest");
    this.type = captureBase.type;
    this.classification = captureBase.classification;
    this.attributes = captureBase.attributes;
    __privateSet(this, _flagged_attributes, captureBase.flagged_attributes);
    this.digest = captureBase.digest ?? "";
  }
  get flaggedAttributes() {
    return __privateGet(this, _flagged_attributes);
  }
};
_flagged_attributes = new WeakMap();

// node_modules/@hyperledger/aries-oca/build/types/bundle/OverlayBundle.js
var _processMetadata, processMetadata_fn, _processLanguages, processLanguages_fn, _processOverlayAttributes, processOverlayAttributes_fn, _processInformationForAttribute, processInformationForAttribute_fn, _processLabelForAttribute, processLabelForAttribute_fn, _processCharacterEncodingForAttribute, processCharacterEncodingForAttribute_fn, _processStandardForAttribute, processStandardForAttribute_fn, _processFormatForAttribute, processFormatForAttribute_fn, _overlaysForType, overlaysForType_fn;
var OverlayBundle = class {
  constructor(credentialDefinitionId, bundle) {
    __privateAdd(this, _processMetadata);
    __privateAdd(this, _processLanguages);
    __privateAdd(this, _processOverlayAttributes);
    __privateAdd(this, _processInformationForAttribute);
    __privateAdd(this, _processLabelForAttribute);
    __privateAdd(this, _processCharacterEncodingForAttribute);
    __privateAdd(this, _processStandardForAttribute);
    __privateAdd(this, _processFormatForAttribute);
    __privateAdd(this, _overlaysForType);
    __publicField(this, "credentialDefinitionId");
    __publicField(this, "captureBase");
    __publicField(this, "overlays");
    __publicField(this, "languages");
    __publicField(this, "metadata");
    __publicField(this, "attributes");
    __publicField(this, "flaggedAttributes");
    this.credentialDefinitionId = credentialDefinitionId;
    this.captureBase = new CaptureBase(bundle.capture_base);
    this.overlays = bundle.overlays.filter((overlay) => overlay.type !== "aries/overlays/branding/1.0").map((overlay) => {
      const OverlayClass = OverlayTypeMap_default.get(overlay.type) || BaseOverlay;
      return new OverlayClass(overlay);
    });
    this.overlays.push(...bundle.overlays.filter((overlay) => overlay.type === "aries/overlays/branding/1.0").map((overlay) => {
      const OverlayClass = OverlayTypeMap_default.get(overlay.type) || BrandingOverlay;
      return new OverlayClass(credentialDefinitionId, overlay);
    }));
    this.languages = __privateMethod(this, _processLanguages, processLanguages_fn).call(this);
    this.metadata = __privateMethod(this, _processMetadata, processMetadata_fn).call(this);
    this.attributes = __privateMethod(this, _processOverlayAttributes, processOverlayAttributes_fn).call(this);
    this.flaggedAttributes = this.attributes.filter((attribute) => this.captureBase.flaggedAttributes.includes(attribute.name));
  }
  get branding() {
    return __privateMethod(this, _overlaysForType, overlaysForType_fn).call(this, "aries/overlays/branding/1.0")[0];
  }
  getAttribute(name) {
    return this.attributes.find((attribute) => attribute.name === name);
  }
  getFlaggedAttribute(name) {
    return this.flaggedAttributes.find((attribute) => attribute.name === name);
  }
};
_processMetadata = new WeakSet();
processMetadata_fn = function() {
  const metadata = {
    name: {},
    description: {},
    credentialHelpText: {},
    credentialSupportUrl: {},
    issuer: {},
    issuerDescription: {},
    issuerUrl: {}
  };
  for (const overlay of __privateMethod(this, _overlaysForType, overlaysForType_fn).call(this, "spec/overlays/meta/1.0")) {
    const language = overlay.language ?? "en";
    const { name, description, credentialHelpText, credentialSupportUrl, issuer, issuerDescription, issuerUrl } = overlay;
    if (name) {
      metadata.name[language] = name;
    }
    if (description) {
      metadata.description[language] = description;
    }
    if (credentialHelpText) {
      metadata.credentialHelpText[language] = credentialHelpText;
    }
    if (credentialSupportUrl) {
      metadata.credentialSupportUrl[language] = credentialSupportUrl;
    }
    if (issuer) {
      metadata.issuer[language] = issuer;
    }
    if (issuerDescription) {
      metadata.issuerDescription[language] = issuerDescription;
    }
    if (issuerUrl) {
      metadata.issuerUrl[language] = issuerUrl;
    }
  }
  return metadata;
};
_processLanguages = new WeakSet();
processLanguages_fn = function() {
  const languages = [];
  for (const overlay of __privateMethod(this, _overlaysForType, overlaysForType_fn).call(this, "spec/overlays/meta/1.0")) {
    const language = overlay.language;
    if (language && !languages.includes(language)) {
      languages.push(language);
    }
  }
  languages.sort((a, b) => a.localeCompare(b));
  return languages;
};
_processOverlayAttributes = new WeakSet();
processOverlayAttributes_fn = function() {
  const attributes = [];
  const attributeMap = new Map(Object.entries(this.captureBase.attributes));
  for (const [name, type] of attributeMap) {
    attributes.push({
      name,
      type,
      information: __privateMethod(this, _processInformationForAttribute, processInformationForAttribute_fn).call(this, name),
      label: __privateMethod(this, _processLabelForAttribute, processLabelForAttribute_fn).call(this, name),
      characterEncoding: __privateMethod(this, _processCharacterEncodingForAttribute, processCharacterEncodingForAttribute_fn).call(this, name),
      standard: __privateMethod(this, _processStandardForAttribute, processStandardForAttribute_fn).call(this, name),
      format: __privateMethod(this, _processFormatForAttribute, processFormatForAttribute_fn).call(this, name)
    });
  }
  return attributes;
};
_processInformationForAttribute = new WeakSet();
processInformationForAttribute_fn = function(key) {
  var _a;
  const information = {};
  for (const overlay of __privateMethod(this, _overlaysForType, overlaysForType_fn).call(this, "spec/overlays/information/1.0")) {
    if ((_a = overlay.attributeInformation) == null ? void 0 : _a[key]) {
      const language = overlay.language ?? "en";
      information[language] = overlay.attributeInformation[key];
    }
  }
  return information;
};
_processLabelForAttribute = new WeakSet();
processLabelForAttribute_fn = function(key) {
  var _a;
  const label = {};
  for (const overlay of __privateMethod(this, _overlaysForType, overlaysForType_fn).call(this, "spec/overlays/label/1.0")) {
    if ((_a = overlay.attributeLabels) == null ? void 0 : _a[key]) {
      const language = overlay.language ?? "en";
      label[language] = overlay.attributeLabels[key];
    }
  }
  return label;
};
_processCharacterEncodingForAttribute = new WeakSet();
processCharacterEncodingForAttribute_fn = function(key) {
  var _a;
  for (const overlay of __privateMethod(this, _overlaysForType, overlaysForType_fn).call(this, "spec/overlays/character_encoding/1.0")) {
    if ((_a = overlay.attributeCharacterEncoding) == null ? void 0 : _a[key]) {
      return overlay.attributeCharacterEncoding[key];
    }
  }
  return;
};
_processStandardForAttribute = new WeakSet();
processStandardForAttribute_fn = function(key) {
  var _a;
  for (const overlay of __privateMethod(this, _overlaysForType, overlaysForType_fn).call(this, "spec/overlays/standard/1.0")) {
    if ((_a = overlay.attributeStandards) == null ? void 0 : _a[key]) {
      return overlay.attributeStandards[key];
    }
  }
  return;
};
_processFormatForAttribute = new WeakSet();
processFormatForAttribute_fn = function(key) {
  var _a;
  for (const overlay of __privateMethod(this, _overlaysForType, overlaysForType_fn).call(this, "spec/overlays/format/1.0")) {
    if ((_a = overlay.attributeFormats) == null ? void 0 : _a[key]) {
      return overlay.attributeFormats[key];
    }
  }
  return;
};
_overlaysForType = new WeakSet();
overlaysForType_fn = function(type) {
  return this.overlays.filter((overlay) => overlay.type === type);
};
var OverlayBundle_default = OverlayBundle;
export {
  BaseOverlay,
  BrandingOverlay,
  CaptureBase,
  CharacterEncodingOverlay,
  FormatOverlay,
  InformationOverlay,
  LabelOverlay,
  MetaOverlay,
  OverlayBundle_default as OverlayBundle,
  OverlayTypeMap_default as OverlayTypeMap,
  StandardOverlay
};
//# sourceMappingURL=@hyperledger_aries-oca_build_types.js.map
